n_null <- c(n_null,length(edges_subset))
if(length(edges_subset) > 0){
neha_karch_sim[[3]]$edge_sum <- apply(cbind(neha_karch_sim[[3]][,edges_subset]),1,sum)
est_neha_sim <- glm(neha_formula,family=binomial,data=neha_karch_sim[[3]])
gamma_zero[s] <- coef(est_neha_sim)[length(coef(est_neha_sim))]
}
}
mean(precision)
mean(recall)
sim_res <- c(mean(precision),mean(recall),mean(gamma),sd(gamma),max(n_null),median(n_null))
names(sim_res) <- c("Precision","Recall","Avg gamma","SD gamma","Max null","Med null")
xtable(cbind(sim_res),dig=4)
xtable(table(n_null))
peha.karch
neha.karch
names(neha.karch)
dim(neha.karch$x)
length(coef(neha.karch))
mean_lp <- mean(cbind(1,neha.karch$x)%*%cbind(coef(neha.karch)))
mean_lp
names(neha.karch$x)
colnames(neha.karch$x)
mean_lp <- mean(cbind(1,neha.karch$x)%*%cbind(coef(neha.karch)))
times <- 1:30
alpha_fun <- function(time,alpha){
exp(-alpha*time)
}
alpha_fun(times,alpha)
alpha_fun(times,neha_karch[[1]])
alpha_fun(times,exp(neha_karch[[1]]))
alpha_fun(times,exp(neha_karch[[1]]))
plot(times,alpha_fun(times,exp(neha_karch[[1]])),ylim=c(0,1))
mean_lp <- mean(cbind(1,neha.karch$x)%*%cbind(coef(neha.karch)))
times <- 1:50
alpha_fun <- function(time,alpha){
exp(-alpha*time)
}
plot(times,alpha_fun(times,exp(neha_karch[[1]])),ylim=c(0,1))
df <- data.frame(years = times,diffusion_effect=alpha_fun(times,exp(neha_karch[[1]])))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line()
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=alpha_fun(times,exp(neha_karch[[1]])))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,1)
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,1)+
xlab("yrs since source adoption")+
ylab("Pr(adoption)")
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlab("yrs since source adoption")+
ylab("Pr(adoption)")
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(plogis(mean_lp))
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(yintercept=[plogis(mean_lp)])
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(aes(yintercept=plogis(mean_lp))
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(aes(yintercept=plogis(mean_lp)))
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlim(min(times),max(times))+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(aes(yintercept=plogis(mean_lp)))
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlim(min(times),max(times))+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(aes(yintercept=plogis(mean_lp)),linetype="dashed")
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlim(min(times),max(times))+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(aes(yintercept=plogis(mean_lp)),linetype="dashed")
ggsave("karch_decay.pdf", width = 5, height = 4)
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlim(min(times),max(times))+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(aes(yintercept=plogis(mean_lp)),linetype="dashed")
ggsave("karch_decay.pdf", width = 4, height = 3)
# 1. ### summarize predictive performance ###
load('karch_oos_results.RData')
load('neha_karch_result.RData')
library(MLmetrics)
policy <- neha_karch[[3]]$policy
upol <- unique(policy)
pr_peha <- numeric(length(upol))
pr_neha <- numeric(length(upol))
pr_neha_s <- numeric(length(upol))
start <- 1
for(p in 1:length(upol)){
nobs <- length(which(policy==upol[p]))
end <- start + nobs - 1
if(mean(testy[start:end]) > 0){
pr_peha[p] <- PRAUC(peha_scorey[start:end], testy[start:end])
pr_neha[p] <- PRAUC(neha_scorey[start:end], testy[start:end])
pr_neha_s[p] <- PRAUC(neha_scorey_s[start:end], testy[start:end])
}
start <- start + nobs
}
library(xtable)
fitmat <- rbind(c(mean(pr_peha),mean(pr_neha),mean(pr_neha_s)))
rownames(fitmat) <- c("AUC-PR")
colnames(fitmat) <- c("PEHA","NEHA","NEHA-S")
xtable(fitmat,dig=4)
# 2. ### Model Estimation ###
### Packages ###
library(foreign)
library(readstata13)
library(sandwich)
library(lmtest)
library(rms)
library(neha)
# setwd()
options(scipen = 99)
## Functions ##
substrRight <- function(x, n){
substr(x, nchar(x) - n + 1, nchar(x))
}
rcse <- function(model, cluster){
require(sandwich); require(lmtest)
G <- length(unique(cluster))
N <- length(resid(model))
k <- length(coef(model))
dfa <- (G/(G - 1)) * (N - 1)/model$df.residual
u <- estfun(model)
u.clust <- matrix(NA, nrow = G, ncol = k)
for(j in 1:k){
u.clust[ , j] <- tapply(u[ , j], cluster, sum)
}
rcov <- dfa * vcov(model) %*% t(u.clust) %*% (u.clust) %*% vcov(model)
rcse <- sqrt(diag(rcov))
result <- coeftest(model, vcov = rcov)
return(list(rcov = rcov, rcse = rcse, result = result))
}
## Karch et al. (2016) ##
karch <- read.dta("karch2016.dta")
karch <- karch[order(karch$state, karch$year), ]
karch[is.na(karch$stateyear), ]$stateyear <- 10
#compnum
# Table 2, column 1 (90) #
peha.karch <- robcov(lrm(adopt ~ traditional + nborsstd +  traditional*nborsstd+prevadoptstd + traditional*prevadoptstd + complexity + traditional*complexity + igrole + traditional*igrole + regov + traditional*regov + unified + traditional*unified + perdemstd + traditional*perdemstd + incpcadjstd + traditional*incpcadjstd + exppcadjstd + traditional*exppcadjstd + logpopstd + traditional*logpopstd + collegstd + traditional*collegstd + perurbanstd + traditional*perurbanstd + profstd + traditional*profstd, x = TRUE, y = TRUE, data = karch), cluster = karch$stateyear)
options(na.action='na.pass')
data_for_karch <- model.matrix(adopt ~ traditional + nborsstd +  traditional*nborsstd+prevadoptstd + traditional*prevadoptstd + complexity + traditional*complexity + igrole + traditional*igrole + regov + traditional*regov + unified + traditional*unified + perdemstd + traditional*perdemstd + incpcadjstd + traditional*incpcadjstd + exppcadjstd + traditional*exppcadjstd + logpopstd + traditional*logpopstd + collegstd + traditional*collegstd + perurbanstd + traditional*perurbanstd + profstd + traditional*profstd,data=karch)[,-1]
colnames(data_for_karch) <- gsub(":","_",colnames(data_for_karch))
covariates <- colnames(data_for_karch)
data_for_karch <- data.frame(data_for_karch)
data_for_karch[,c("adopt","state","year","stateyear")] <- karch[,c("adopt","state","year","stateyear")]
data_for_karch$policy <- paste("p",karch$compnum,sep="")
karch_nona <- na.omit(data_for_karch)
library(neha)
karch_nona <- neha_karch[[3]]
edge_effs <- neha_karch[[2]]
neha_formula <- as.formula(paste("adopt ~",paste(c(covariates,edge_effs),collapse="+")))
neha_formula <- as.formula(paste("adopt ~",paste(c(covariates,"edge_sum"),collapse="+")))
karch_nona$edge_sum <- apply(karch_nona[,edge_effs],1,sum)
neha.karch <- robcov(lrm(neha_formula, x = TRUE, y = TRUE, data = karch_nona), cluster = karch_nona$stateyear)
mean_lp <- mean(cbind(1,neha.karch$x)%*%cbind(coef(neha.karch)))
times <- 1:50
alpha_fun <- function(time,alpha){
exp(-alpha*time)
}
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlim(min(times),max(times))+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(aes(yintercept=plogis(mean_lp)),linetype="dashed")
ggsave("karch_decay.pdf", width = 4, height = 3)
neha.bic <- BIC(glm(neha_formula, family=binomial,data=karch_nona))
peha.bic <- BIC(glm(adopt ~ traditional + nborsstd +  traditional*nborsstd+prevadoptstd + traditional*prevadoptstd + complexity + traditional*complexity + igrole + traditional*igrole + regov + traditional*regov + unified + traditional*unified + perdemstd + traditional*perdemstd + incpcadjstd + traditional*incpcadjstd + exppcadjstd + traditional*exppcadjstd + logpopstd + traditional*logpopstd + collegstd + traditional*collegstd + perurbanstd + traditional*perurbanstd + profstd + traditional*profstd, family=binomial,data=karch_nona))
reg_table <- cbind(c(coef(peha.karch),NA), c(sqrt(diag(peha.karch$var)),NA) , c(coef(neha.karch)), c(sqrt(diag(neha.karch$var))))
reg_table <- rbind(reg_table,c(NA,NA,NA,exp(neha_karch[[1]])))
reg_table <- rbind(reg_table,c(nrow(karch_nona),length(upol),NA,NA))
reg_table <- rbind(reg_table,c(NA,peha.bic,NA,neha.bic))
rownames(reg_table)[c(nrow(reg_table)-3,nrow(reg_table)-2,nrow(reg_table)-1,nrow(reg_table))] <- c("gamma","alpha","obs_policy","BIC")
xtable(reg_table,dig=4)
edge_list <- do.call('rbind', strsplit(edge_effs,"_"))
library(igraph)
net <- graph_from_edgelist(edge_list)
set.seed(9202011)
pdf("karch_edge_plot.pdf",height=4,width=4,pointsize=8)
plot(net, edge.arrow.size=.4, edge.color="blue", vertex.color="grey75", vertex.frame.color="grey75", vertex.label.color="black")
dev.off()
# 3. ### simulation performance summary ###
# precision, recall, and frequency table of
precision <- NULL
recall <- NULL
n_null <- NULL
sim_edges <- list()
sim_edges_zero <- list()
gamma <- numeric(10)
gamma_zero <- numeric(10)
neha_formula <-  as.formula(paste("event ~",paste(c(covariates,"edge_sum"), collapse="+" ),sep=""))
for(s in 1:10){
load(paste("neha_karch_sim_subset",s,".RData",sep=""))
sim_edges[[s]] <- edges_subset
precision <- c(precision, mean(is.element(edges_subset,edge_effs)))
neha_karch_sim[[3]]$edge_sum <- apply(neha_karch_sim[[3]][,edges_subset],1,sum)
est_neha_sim <- glm(neha_formula,family=binomial,data=neha_karch_sim[[3]])
gamma[s] <- coef(est_neha_sim)[length(coef(est_neha_sim))]
recall <- c(recall, mean(is.element(edge_effs,edges_subset)))
load(paste("neha_karch_sim_subset_zero",s,".RData",sep=""))
sim_edges_zero[[s]] <- edges_subset
n_null <- c(n_null,length(edges_subset))
if(length(edges_subset) > 0){
neha_karch_sim[[3]]$edge_sum <- apply(cbind(neha_karch_sim[[3]][,edges_subset]),1,sum)
est_neha_sim <- glm(neha_formula,family=binomial,data=neha_karch_sim[[3]])
gamma_zero[s] <- coef(est_neha_sim)[length(coef(est_neha_sim))]
}
}
mean(precision)
mean(recall)
sim_res <- c(mean(precision),mean(recall),mean(gamma),sd(gamma),max(n_null),median(n_null))
names(sim_res) <- c("Precision","Recall","Avg gamma","SD gamma","Max null","Med null")
xtable(cbind(sim_res),dig=4)
xtable(table(n_null))
# 1. ### summarize predictive performance ###
load('karch_oos_results.RData')
load('neha_karch_result.RData')
library(MLmetrics)
policy <- neha_karch[[3]]$policy
upol <- unique(policy)
pr_peha <- numeric(length(upol))
pr_neha <- numeric(length(upol))
pr_neha_s <- numeric(length(upol))
start <- 1
for(p in 1:length(upol)){
nobs <- length(which(policy==upol[p]))
end <- start + nobs - 1
if(mean(testy[start:end]) > 0){
pr_peha[p] <- PRAUC(peha_scorey[start:end], testy[start:end])
pr_neha[p] <- PRAUC(neha_scorey[start:end], testy[start:end])
pr_neha_s[p] <- PRAUC(neha_scorey_s[start:end], testy[start:end])
}
start <- start + nobs
}
library(xtable)
fitmat <- rbind(c(mean(pr_peha),mean(pr_neha),mean(pr_neha_s)))
rownames(fitmat) <- c("AUC-PR")
colnames(fitmat) <- c("PEHA","NEHA","NEHA-S")
xtable(fitmat,dig=4)
# 2. ### Model Estimation ###
### Packages ###
library(foreign)
library(readstata13)
library(sandwich)
library(lmtest)
library(rms)
library(neha)
# setwd()
options(scipen = 99)
## Functions ##
substrRight <- function(x, n){
substr(x, nchar(x) - n + 1, nchar(x))
}
rcse <- function(model, cluster){
require(sandwich); require(lmtest)
G <- length(unique(cluster))
N <- length(resid(model))
k <- length(coef(model))
dfa <- (G/(G - 1)) * (N - 1)/model$df.residual
u <- estfun(model)
u.clust <- matrix(NA, nrow = G, ncol = k)
for(j in 1:k){
u.clust[ , j] <- tapply(u[ , j], cluster, sum)
}
rcov <- dfa * vcov(model) %*% t(u.clust) %*% (u.clust) %*% vcov(model)
rcse <- sqrt(diag(rcov))
result <- coeftest(model, vcov = rcov)
return(list(rcov = rcov, rcse = rcse, result = result))
}
## Karch et al. (2016) ##
karch <- read.dta("karch2016.dta")
karch <- karch[order(karch$state, karch$year), ]
karch[is.na(karch$stateyear), ]$stateyear <- 10
#compnum
# Table 2, column 1 (90) #
peha.karch <- robcov(lrm(adopt ~ traditional + nborsstd +  traditional*nborsstd+prevadoptstd + traditional*prevadoptstd + complexity + traditional*complexity + igrole + traditional*igrole + regov + traditional*regov + unified + traditional*unified + perdemstd + traditional*perdemstd + incpcadjstd + traditional*incpcadjstd + exppcadjstd + traditional*exppcadjstd + logpopstd + traditional*logpopstd + collegstd + traditional*collegstd + perurbanstd + traditional*perurbanstd + profstd + traditional*profstd, x = TRUE, y = TRUE, data = karch), cluster = karch$stateyear)
options(na.action='na.pass')
data_for_karch <- model.matrix(adopt ~ traditional + nborsstd +  traditional*nborsstd+prevadoptstd + traditional*prevadoptstd + complexity + traditional*complexity + igrole + traditional*igrole + regov + traditional*regov + unified + traditional*unified + perdemstd + traditional*perdemstd + incpcadjstd + traditional*incpcadjstd + exppcadjstd + traditional*exppcadjstd + logpopstd + traditional*logpopstd + collegstd + traditional*collegstd + perurbanstd + traditional*perurbanstd + profstd + traditional*profstd,data=karch)[,-1]
colnames(data_for_karch) <- gsub(":","_",colnames(data_for_karch))
covariates <- colnames(data_for_karch)
data_for_karch <- data.frame(data_for_karch)
data_for_karch[,c("adopt","state","year","stateyear")] <- karch[,c("adopt","state","year","stateyear")]
data_for_karch$policy <- paste("p",karch$compnum,sep="")
karch_nona <- na.omit(data_for_karch)
library(neha)
karch_nona <- neha_karch[[3]]
edge_effs <- neha_karch[[2]]
neha_formula <- as.formula(paste("adopt ~",paste(c(covariates,edge_effs),collapse="+")))
neha_formula <- as.formula(paste("adopt ~",paste(c(covariates,"edge_sum"),collapse="+")))
karch_nona$edge_sum <- apply(karch_nona[,edge_effs],1,sum)
neha.karch <- robcov(lrm(neha_formula, x = TRUE, y = TRUE, data = karch_nona), cluster = karch_nona$stateyear)
mean_lp <- mean(cbind(1,neha.karch$x)%*%cbind(coef(neha.karch)))
times <- 1:50
alpha_fun <- function(time,alpha){
exp(-alpha*time)
}
library(ggplot2)
df <- data.frame(years = times,diffusion_effect=plogis(mean_lp + coef(neha.karch)[length(coef(neha.karch))]*alpha_fun(times,exp(neha_karch[[1]]))))
ggplot(data=df, aes(x=times, y=diffusion_effect, group=1)) +
geom_line() +
ylim(0,.10)+
xlim(min(times),max(times))+
xlab("yrs since source adoption")+
ylab("Pr(adoption)") +
geom_hline(aes(yintercept=plogis(mean_lp)),linetype="dashed")
ggsave("karch_decay.pdf", width = 4, height = 3)
neha.bic <- BIC(glm(neha_formula, family=binomial,data=karch_nona))
peha.bic <- BIC(glm(adopt ~ traditional + nborsstd +  traditional*nborsstd+prevadoptstd + traditional*prevadoptstd + complexity + traditional*complexity + igrole + traditional*igrole + regov + traditional*regov + unified + traditional*unified + perdemstd + traditional*perdemstd + incpcadjstd + traditional*incpcadjstd + exppcadjstd + traditional*exppcadjstd + logpopstd + traditional*logpopstd + collegstd + traditional*collegstd + perurbanstd + traditional*perurbanstd + profstd + traditional*profstd, family=binomial,data=karch_nona))
reg_table <- cbind(c(coef(peha.karch),NA), c(sqrt(diag(peha.karch$var)),NA) , c(coef(neha.karch)), c(sqrt(diag(neha.karch$var))))
reg_table <- rbind(reg_table,c(NA,NA,NA,exp(neha_karch[[1]])))
reg_table <- rbind(reg_table,c(nrow(karch_nona),length(upol),NA,NA))
reg_table <- rbind(reg_table,c(NA,peha.bic,NA,neha.bic))
rownames(reg_table)[c(nrow(reg_table)-3,nrow(reg_table)-2,nrow(reg_table)-1,nrow(reg_table))] <- c("gamma","alpha","obs_policy","BIC")
xtable(reg_table,dig=4)
edge_list <- do.call('rbind', strsplit(edge_effs,"_"))
library(igraph)
net <- graph_from_edgelist(edge_list)
set.seed(9202011)
pdf("karch_edge_plot.pdf",height=4,width=4,pointsize=8)
plot(net, edge.arrow.size=.4, edge.color="blue", vertex.color="grey75", vertex.frame.color="grey75", vertex.label.color="black")
dev.off()
# 3. ### simulation performance summary ###
# precision, recall, and frequency table of
precision <- NULL
recall <- NULL
n_null <- NULL
sim_edges <- list()
sim_edges_zero <- list()
gamma <- numeric(50)
gamma_zero <- numeric(50)
neha_formula <-  as.formula(paste("event ~",paste(c(covariates,"edge_sum"), collapse="+" ),sep=""))
for(s in 1:50){
load(paste("neha_karch_sim_subset",s,".RData",sep=""))
sim_edges[[s]] <- edges_subset
precision <- c(precision, mean(is.element(edges_subset,edge_effs)))
neha_karch_sim[[3]]$edge_sum <- apply(neha_karch_sim[[3]][,edges_subset],1,sum)
est_neha_sim <- glm(neha_formula,family=binomial,data=neha_karch_sim[[3]])
gamma[s] <- coef(est_neha_sim)[length(coef(est_neha_sim))]
recall <- c(recall, mean(is.element(edge_effs,edges_subset)))
load(paste("neha_karch_sim_subset_zero",s,".RData",sep=""))
sim_edges_zero[[s]] <- edges_subset
n_null <- c(n_null,length(edges_subset))
if(length(edges_subset) > 0){
neha_karch_sim[[3]]$edge_sum <- apply(cbind(neha_karch_sim[[3]][,edges_subset]),1,sum)
est_neha_sim <- glm(neha_formula,family=binomial,data=neha_karch_sim[[3]])
gamma_zero[s] <- coef(est_neha_sim)[length(coef(est_neha_sim))]
}
}
mean(precision)
mean(recall)
.7155/.6474
2.151/1.882
4854/5333
5333/4854
xtable(cbind(sim_res),dig=4)
sim_res <- c(mean(precision),mean(recall),mean(gamma),sd(gamma),max(n_null),median(n_null))
names(sim_res) <- c("Precision","Recall","Avg gamma","SD gamma","Max null","Med null")
xtable(cbind(sim_res),dig=4)
sim_res <- c(mean(precision),mean(recall),max(n_null),median(n_null))
names(sim_res) <- c("Precision","Recall","Max null","Med null")
xtable(cbind(sim_res),dig=4)
p<-ggplot(df, aes(x=gamma)) +
geom_histogram(color="black", fill="white",bins=15)
p+ geom_vline(aes(xintercept=coef(neha.boushey)["edge_sum"]),
color="blue", linetype="dashed", size=1) + geom_vline(aes(xintercept=mean(gamma)),
color="red", size=1)
p<-ggplot(df, aes(x=gamma)) +
geom_histogram(color="black", fill="white",bins=15)
p+ geom_vline(aes(xintercept=coef(neha.karch)["edge_sum"]),
color="blue", linetype="dashed", size=1) + geom_vline(aes(xintercept=mean(gamma)),
color="red", size=1)
p<-ggplot(df, aes(x=gamma)) +
geom_histogram(color="black", fill="white",bins=10)
p+ geom_vline(aes(xintercept=coef(neha.karch)["edge_sum"]),
color="blue", linetype="dashed", size=1) + geom_vline(aes(xintercept=mean(gamma)),
color="red", size=1)
p<-ggplot(df, aes(x=gamma)) +
geom_histogram(color="black", fill="white",bins=10)
p+ geom_vline(aes(xintercept=coef(neha.karch)["edge_sum"]),
color="blue", linetype="dashed", size=1) + geom_vline(aes(xintercept=mean(gamma)),
color="red", size=1)
ggsave("karch_gamma_sim.pdf", width = 4, height = 3)
peha.karch
neha.karch
library(foreign)
library(readstata13)
library(sandwich)
library(lmtest)
library(rms)
library(neha)
# setwd()
options(scipen = 99)
## Functions ##
substrRight <- function(x, n){
substr(x, nchar(x) - n + 1, nchar(x))
}
rcse <- function(model, cluster){
require(sandwich); require(lmtest)
G <- length(unique(cluster))
N <- length(resid(model))
k <- length(coef(model))
dfa <- (G/(G - 1)) * (N - 1)/model$df.residual
u <- estfun(model)
u.clust <- matrix(NA, nrow = G, ncol = k)
for(j in 1:k){
u.clust[ , j] <- tapply(u[ , j], cluster, sum)
}
rcov <- dfa * vcov(model) %*% t(u.clust) %*% (u.clust) %*% vcov(model)
rcse <- sqrt(diag(rcov))
result <- coeftest(model, vcov = rcov)
return(list(rcov = rcov, rcse = rcse, result = result))
}
## Karch et al. (2016) ##
karch <- read.dta("./replication_data/karch2016.dta")
karch <- karch[order(karch$state, karch$year), ]
karch[is.na(karch$stateyear), ]$stateyear <- 10
#compnum
# Table 2, column 1 (90) #
peha.karch <- robcov(lrm(adopt ~ traditional + nborsstd +  traditional*nborsstd+prevadoptstd + traditional*prevadoptstd + complexity + traditional*complexity + igrole + traditional*igrole + regov + traditional*regov + unified + traditional*unified + perdemstd + traditional*perdemstd + incpcadjstd + traditional*incpcadjstd + exppcadjstd + traditional*exppcadjstd + logpopstd + traditional*logpopstd + collegstd + traditional*collegstd + perurbanstd + traditional*perurbanstd + profstd + traditional*profstd, x = TRUE, y = TRUE, data = karch), cluster = karch$stateyear)
options(na.action='na.pass')
data_for_karch <- model.matrix(adopt ~ traditional + nborsstd +  traditional*nborsstd+prevadoptstd + traditional*prevadoptstd + complexity + traditional*complexity + igrole + traditional*igrole + regov + traditional*regov + unified + traditional*unified + perdemstd + traditional*perdemstd + incpcadjstd + traditional*incpcadjstd + exppcadjstd + traditional*exppcadjstd + logpopstd + traditional*logpopstd + collegstd + traditional*collegstd + perurbanstd + traditional*perurbanstd + profstd + traditional*profstd,data=karch)[,-1]
colnames(data_for_karch) <- gsub(":","_",colnames(data_for_karch))
covariates <- colnames(data_for_karch)
data_for_karch <- data.frame(data_for_karch)
data_for_karch[,c("adopt","state","year","stateyear")] <- karch[,c("adopt","state","year","stateyear")]
data_for_karch$policy <- paste("p",karch$compnum,sep="")
karch_nona <- na.omit(data_for_karch)
library(neha)
karch_nona <- neha_karch[[3]]
edge_effs <- neha_karch[[2]]
neha_formula <- as.formula(paste("adopt ~",paste(c(covariates,edge_effs),collapse="+")))
neha_formula <- as.formula(paste("adopt ~",paste(c(covariates,"edge_sum"),collapse="+")))
karch_nona$edge_sum <- apply(karch_nona[,edge_effs],1,sum)
neha.karch <- robcov(lrm(neha_formula, x = TRUE, y = TRUE, data = karch_nona), cluster = karch_nona$stateyear)
minyr <- numeric(nrow(karch_nona))
for(i in 1:length(minyr)){
minyr[i] <- min(karch_nona$year[which(karch_nona$policy==karch_nona$policy[i])])
}
karch_nona$minyr <- log(minyr)
karch_nona$minyr_sq <- minyr^2
neha_formula_yrfun <- as.formula(paste("adopt ~",paste(c(covariates,"edge_sum","minyr"),collapse="+")))
neha.yrfun <- robcov(lrm(neha_formula_yrfun, x = TRUE, y = TRUE, data = karch_nona,tol=1e-20,maxit=1000), cluster = karch_nona$stateyear)
save(list='neha.yrfun',file='./results_summaries/minyr_estimate.RData')
neha.yrfun
neha.yrfun <- robcov(lrm(neha_formula_yrfun, x = TRUE, y = TRUE, data = karch_nona,tol=1e-200,maxit=10000), cluster = karch_nona$stateyear)
neha.yrfun
glm(neha_formula_yrfun, x = TRUE, y = TRUE, data = karch_nona, family='binomial')
neha.yrfun
save(list='neha.yrfun',file='./results_summaries/minyr_estimate.RData')
hist(karch_nona$minyrr)
karch_nona$minyr <- minyr
neha_formula_yrfun <- as.formula(paste("adopt ~",paste(c(covariates,"edge_sum","minyr"),collapse="+")))
neha.yrfun <- robcov(lrm(neha_formula_yrfun, x = TRUE, y = TRUE, data = karch_nona,tol=1e-200,maxit=10000), cluster = karch_nona$stateyear)
save(list='neha.yrfun',file='./results_summaries/minyr_estimate.RData')
neha.yrfun
save(list='neha.yrfun',file='./results_summaries/minyr_estimate.RData')
