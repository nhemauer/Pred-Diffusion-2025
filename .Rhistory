### Preprocessing
library(tidyverse)
library(haven)
library(rsample)
library(randomForest)
set.seed(1337)
boehmke_2017 <- read_dta("boehmke_analysis/replication_data/boehmke2017.dta")
boushey_2016 <- read_dta("boushey_analysis/replication_data/boushey2016.dta")
bricker_lacombe_2021 <- read_dta("bricker_lacombe_analysis/replication_data/monadic_analysis_largen.dta")
karch_2016 <- read_dta("karch_analysis/replication_data/karch2016.dta")
### Boehmke 2017
# Covariates
covariates <- c("srcs_decay","nbrs_lag","rpcpinc","totpop","legp_squire","citi6010","unif_rep","unif_dem","time","time_sq","time_cube")
# Remove Data After Adoption and Omit Missing
boehmke_2017 <- na.omit(boehmke_2017[, c(covariates,"adopt","statepol","policy","state","year")])
## Stratified Sampling
stratified_split <- function(data, strata_cols = NULL, prop = 0.8, seed = 1337) {
set.seed(seed)
# Combine strata columns into one
data <- data %>%
mutate(Strata = apply(select(., all_of(strata_cols)), 1, paste, collapse = "_"))
# Perform the split
split <- initial_split(data, prop = prop, strata = Strata)
# Return train and test datasets
list(
train = training(split) %>% select(-Strata),
test = testing(split) %>% select(-Strata)
)
}
# Usage
boehmke_strat_samp <- stratified_split(boehmke_2017)
## RF
# Holdout State, Policy, Year
rf_model <- randomForest(factor(adopt) ~ ., data = boehmke_strat_samp$train[, -c(13:16)], ntree = 500, mtry = 2, importance = TRUE)
View(boehmke_strat_samp)
# Test
boehmke_strat_sample$test$adopt <- as.factor(boehmke_strat_sample$test$adopt)
# Test
boehmke_strat_samp$test$adopt <- as.factor(boehmke_strat_samp$test$adopt)
predictions <- predict(rf_model, newdata = boehmke_strat_samp$test[, -c(13:16)])
# Evaluate
conf_matrix <- table(Predicted = predictions, Actual = boehmke_strat_samp$test$adopt)
print(conf_matrix)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Model Accuracy on Test Data:", round(accuracy * 100, 2), "%\n")
boehmke_strat_samp$test
predictions <- predict(rf_model, newdata = boehmke_strat_samp$test[, -c(12:16)])
# Evaluate
conf_matrix <- confusionMatrix(predictions, boehmke_strat_samp$test$adopt, positive = "1")
library(caret)
predictions <- predict(rf_model, newdata = boehmke_strat_samp$test[, -c(12:16)])
# Evaluate
conf_matrix <- confusionMatrix(predictions, boehmke_strat_samp$test$adopt, positive = "1")
print(conf_matrix)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
# F1 Scores
f1_micro <- F1_Score(predictions, test_data$policy, average = "micro")
library(caret)
conf_matrix$byClass
# Evaluate
conf_matrix <- confusionMatrix(predictions, boehmke_strat_samp$test$adopt, mode = "prec_recall", positive = "1")
print(conf_matrix)
print(conf_matrix)
boehmke_rf <- randomForest(factor(adopt) ~ ., data = boehmke_strat_samp$train[, -c(13:16)], ntree = 1000, importance = TRUE)
# Test
boehmke_strat_samp$test$adopt <- as.factor(boehmke_strat_samp$test$adopt)
predictions <- predict(boehmke_rf, newdata = boehmke_strat_samp$test[, -c(12:16)])
# Evaluate
conf_matrix <- confusionMatrix(predictions, boehmke_strat_samp$test$adopt, mode = "prec_recall", positive = "1")
print(conf_matrix)
### Boehmke 2017
# Covariates
covariates <- c("srcs_decay","nbrs_lag","rpcpinc","totpop","legp_squire","citi6010","unif_rep","unif_dem","time","time_sq","time_cube")
# Remove Data After Adoption and Omit Missing
boehmke_2017 <- na.omit(boehmke_2017[, c(covariates,"adopt","statepol","policy","state","year")])
## Stratified Sampling
stratified_split <- function(data, strata_cols = NULL, prop = 0.7, seed = 1337) {
set.seed(seed)
# Combine strata columns into one
data <- data %>%
mutate(Strata = apply(select(., all_of(strata_cols)), 1, paste, collapse = "_"))
# Perform the split
split <- initial_split(data, prop = prop, strata = Strata)
# Return train and test
list(
train = training(split) %>% select(-Strata),
test = testing(split) %>% select(-Strata)
)
}
# Usage
boehmke_strat_samp <- stratified_split(boehmke_2017)
## RF
# Train
# Holdout State, Policy, Year
boehmke_rf <- randomForest(factor(adopt) ~ ., data = boehmke_strat_samp$train[, -c(13:16)], ntree = 500, importance = TRUE)
# Test
boehmke_strat_samp$test$adopt <- as.factor(boehmke_strat_samp$test$adopt)
predictions <- predict(boehmke_rf, newdata = boehmke_strat_samp$test[, -c(12:16)])
# Evaluate
conf_matrix <- confusionMatrix(predictions, boehmke_strat_samp$test$adopt, mode = "prec_recall", positive = "1")
print(conf_matrix)
# Currently horrible
### Boehmke 2017
# Covariates
covariates <- c("srcs_decay","nbrs_lag","rpcpinc","totpop","legp_squire","citi6010","unif_rep","unif_dem","time","time_sq","time_cube")
# Remove Data After Adoption and Omit Missing
boehmke_2017 <- na.omit(boehmke_2017[, c(covariates,"adopt","statepol","policy","state","year")])
## Stratified Sampling
stratified_split <- function(data, strata_cols = NULL, prop = 0.8, seed = 1336) {
set.seed(seed)
# Combine strata columns into one
data <- data %>%
mutate(Strata = apply(select(., all_of(strata_cols)), 1, paste, collapse = "_"))
# Perform the split
split <- initial_split(data, prop = prop, strata = Strata)
# Return train and test
list(
train = training(split) %>% select(-Strata),
test = testing(split) %>% select(-Strata)
)
}
# Usage
boehmke_strat_samp <- stratified_split(boehmke_2017)
## RF
# Train
# Holdout State, Policy, Year
boehmke_rf <- randomForest(factor(adopt) ~ ., data = boehmke_strat_samp$train[, -c(13:16)], ntree = 500, importance = TRUE)
# Test
boehmke_strat_samp$test$adopt <- as.factor(boehmke_strat_samp$test$adopt)
predictions <- predict(boehmke_rf, newdata = boehmke_strat_samp$test[, -c(12:16)])
# Evaluate
conf_matrix <- confusionMatrix(predictions, boehmke_strat_samp$test$adopt, mode = "prec_recall", positive = "1")
print(conf_matrix)
# Currently horrible
install.packages('xgboost')
library(xgboost)
